"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Api {
    constructor(config) {
        this.METHOD_GET = "GET";
        this.METHOD_POST = "POST";
        this.applyConfig(config);
    }
    applyConfig(config) {
        this.config = this.mergeDefaults(config);
    }
    getConfig() {
        return this.config;
    }
    mergeDefaults(config) {
        const protocol = config.protocol || "http";
        const port = config.port || (protocol === "https" ? 443 : 80);
        return {
            host: config.host || "127.0.0.1",
            protocol,
            port,
            timeout: config.timeout || 20000,
            logging: config.logging || false,
            logger: config.logger || console.log,
            network: config.network,
        };
    }
    async get(endpoint, config) {
        return await this.request(endpoint, Object.assign(Object.assign({}, config), { method: this.METHOD_GET }));
    }
    async post(endpoint, body, config) {
        const headers = new Headers((config === null || config === void 0 ? void 0 : config.headers) || {});
        headers.append("content-type", "application/json");
        headers.append("accept", "application/json, text/plain, */*");
        return await this.request(endpoint, Object.assign(Object.assign({}, config), { method: this.METHOD_POST, body: JSON.stringify(body), headers }));
    }
    async request(endpoint, init) {
        const headers = new Headers((init === null || init === void 0 ? void 0 : init.headers) || {});
        const baseURL = `${this.config.protocol}://${this.config.host}:${this.config.port}`;
        if (endpoint.startsWith("/")) {
            endpoint = endpoint.replace("/", "");
        }
        if (this.config.network) {
            headers.append("x-network", this.config.network);
        }
        if (this.config.logging) {
            this.config.logger(`Requesting: ${baseURL}/${endpoint}`);
        }
        let res = await fetch(`${baseURL}/${endpoint}`, Object.assign(Object.assign({}, (init || {})), { headers }));
        if (this.config.logging) {
            this.config.logger(`Response:   ${res.url} - ${res.status}`);
        }
        const contentType = res.headers.get("content-type");
        const response = res;
        if (contentType === null || contentType === void 0 ? void 0 : contentType.startsWith("application/json")) {
            response.data = (await res.clone().json());
        }
        else {
            try {
                response.data = (await res.clone().text());
            }
            catch (_a) {
                response.data = (await res.clone().arrayBuffer());
            }
        }
        return response;
    }
}
exports.default = Api;
//# sourceMappingURL=api.js.map